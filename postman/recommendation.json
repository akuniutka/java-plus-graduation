{
	"info": {
		"_postman_id": "04c25d9a-8f74-4204-b5b4-8254eade217d",
		"name": "Explore With Me - Recommendations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27052193"
	},
	"item": [
		{
			"name": "Similar Events",
			"item": [
				{
					"name": "Get Similar Events",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"",
									"        const initiator = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventA = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventB = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventC = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        eventA = await api.publishEvent(eventA.id);",
									"        eventB = await api.publishEvent(eventB.id);",
									"        eventC = await api.publishEvent(eventC.id);",
									"",
									"",
									"",
									"        await api.findEvent(eventA.id, verbose=null, withUser = user1.id.toString());",
									"        await api.findEvent(eventB.id, verbose=null, withUser = user2.id.toString());",
									"        await api.findEvent(eventC.id, verbose=null, withUser = user3.id.toString());",
									"        await api.findEvent(eventB.id, verbose=null, withUser = user1.id.toString());",
									"        await api.publishParticipationRequest(eventA.id, user2.id);",
									"        await api.findEvent(eventA.id, verbose=null, withUser = user3.id.toString());",
									"        await api.findEvent(eventB.id, verbose=null, withUser = user3.id.toString());",
									"",
									"        const newUser = await api.addUser(rnd.getUser());",
									"        pm.collectionVariables.set('eventId', eventC.id);",
									"        pm.collectionVariables.set('userId', newUser.id);",
									"        pm.collectionVariables.set('similarEvent1', eventB.id);",
									"        pm.collectionVariables.set('similarEvent2', eventA.id);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"const target = pm.response.json();",
									"const similarEvent1 = pm.collectionVariables.get('similarEvent1');",
									"const similarEvent2 = pm.collectionVariables.get('similarEvent2');",
									"",
									"pm.test(\"Список должен быть из двух событий\", function () {",
									"    pm.expect(target.length).to.equal(2);",
									"});",
									"",
									"pm.test(\"События в списке должны следовать в правильном порядке\", function () {",
									"    pm.expect(target[0].id).to.be.equal(similarEvent1);",
									"    pm.expect(target[1].id).to.be.equal(similarEvent2);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-EWM-USER-ID",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/:eventId/similar",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								":eventId",
								"similar"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eventId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "Get Recommendations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const user1 = await api.addUser(rnd.getUser());",
									"        const user2 = await api.addUser(rnd.getUser());",
									"        const user3 = await api.addUser(rnd.getUser());",
									"        const user4 = await api.addUser(rnd.getUser());",
									"",
									"        const initiator = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let eventA = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventB = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventC = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventD = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventE = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"        let eventF = await api.addEvent(initiator.id, rnd.getEvent(category.id));",
									"",
									"        eventA = await api.publishEvent(eventA.id);",
									"        eventB = await api.publishEvent(eventB.id);",
									"        eventC = await api.publishEvent(eventC.id);",
									"        eventD = await api.publishEvent(eventD.id);",
									"        eventE = await api.publishEvent(eventE.id);",
									"        eventF = await api.publishEvent(eventF.id);",
									"",
									"        await api.viewEvent(eventA.id, user1.id);",
									"        await api.publishParticipationRequest(eventB.id, user1.id);",
									"        await api.publishParticipationRequest(eventA.id, user2.id);",
									"        await api.viewEvent(eventB.id, user2.id);",
									"        await api.publishParticipationRequest(eventC.id, user2.id);",
									"        await api.viewEvent(eventD.id, user4.id);",
									"        await api.viewEvent(eventE.id, user4.id);",
									"        await api.viewEvent(eventA.id, user3.id);",
									"        await api.publishParticipationRequest(eventB.id, user3.id);",
									"        await api.viewEvent(eventC.id, user3.id);",
									"        await api.publishParticipationRequest(eventD.id, user3.id);",
									"        await api.viewEvent(eventE.id, user3.id);",
									"        await api.viewEvent(eventF.id, user4.id);",
									"        ",
									"        pm.collectionVariables.set('userId', user1.id);",
									"        pm.collectionVariables.set('recommendedEvent1', eventD.id);",
									"        pm.collectionVariables.set('recommendedEvent2', eventE.id);",
									"        pm.collectionVariables.set('recommendedEvent3', eventC.id);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"const target = pm.response.json();",
									"const recommendedEvent1 = pm.collectionVariables.get('recommendedEvent1');",
									"const recommendedEvent2 = pm.collectionVariables.get('recommendedEvent2');",
									"const recommendedEvent3 = pm.collectionVariables.get('recommendedEvent3');",
									"",
									"pm.test(\"Список должен быть из трёх событий\", function () {",
									"    pm.expect(target.length).to.equal(3);",
									"});",
									"",
									"pm.test(\"События в списке должны следовать в правильном порядке\", function () {",
									"    pm.expect(target[0].id).to.be.equal(recommendedEvent1);",
									"    pm.expect(target[1].id).to.be.equal(recommendedEvent2);",
									"    pm.expect(target[2].id).to.be.equal(recommendedEvent3);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-EWM-USER-ID",
								"value": "{{userId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/recommendations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"recommendations"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null, withUser=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose, withUser);",
					"    }",
					"",
					"    async viewEvent(eventId, userId, verbose=null) {",
					"        return this.findEvent(eventId, verbose, userId.toString());",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async subscribeToUser(subscriberId, publisherId, verbose=null) {",
					"        return this.postForNoBody('/users/' + subscriberId + '/subscriptions?initiatorId=' + publisherId, null, 'Ошибка при создании подписки', verbose)",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async postForNoBody(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequestForNoBody(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null, withUser=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose, withUser);",
					"    }",
					"",
					"    async sendRequest(method, path, body = null, errorText = \"Ошибка при выполнении запроса: \", verbose=null, withUser=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            let header = { \"Content-Type\": \"application/json\" };",
					"            if (withUser != null) {",
					"                header = { ",
					"                    \"Content-Type\": \"application/json\",",
					"                    \"X-EWM-USER-ID\": withUser",
					"                    };",
					"            }",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: header",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"",
					"    async sendRequestForNoBody(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response);",
					"                    }",
					"                    resolve(response);",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "similarEvent1",
			"value": "0",
			"type": "string"
		},
		{
			"key": "similarEvent2",
			"value": "0",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "recommendedEvent1",
			"value": "0",
			"type": "string"
		},
		{
			"key": "recommendedEvent2",
			"value": "0",
			"type": "string"
		},
		{
			"key": "recommendedEvent3",
			"value": "0",
			"type": "string"
		}
	]
}